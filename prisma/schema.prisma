generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model usuarios {
  id_usuario         Int                  @id @default(autoincrement())
  alias              String               @db.VarChar(40)
  correo             String               @unique(map: "unique_correo") @db.VarChar(30)
  pass               String               @db.Text
  editor             String               @db.VarChar(40)
  verificado         Int                  @default(1)
  activo             Int                  @default(1)
  asistencia_eventos asistencia_eventos[]
  historial_usuario  historial_usuario[]
  usuario_det        usuario_det?
}

model roles {
  id_rol       Int            @id @default(autoincrement())
  rol          String         @db.VarChar(25)
  rol_permisos rol_permisos[]
  usuario_det  usuario_det[]
}

model usuario_det {
  id_usuario_det   Int       @id @default(autoincrement())
  id_usuario       Int       @unique
  nombre           String    @db.VarChar(25)
  apellidos        String    @db.VarChar(25)
  pais             String?   @db.VarChar(35)
  ciudad           String?   @db.VarChar(35)
  fecha_nacimiento DateTime? @db.Date
  num_cel          Int?
  cod_celular      Int?
  genero           Int?
  id_rol           Int
  roles            roles     @relation(fields: [id_rol], references: [id_rol])
  usuarios         usuarios  @relation(fields: [id_usuario], references: [id_usuario])
}

model rol_permisos {
  id_rol     Int
  id_permiso Int
  permisos   permisos @relation(fields: [id_permiso], references: [id_permiso])
  roles      roles    @relation(fields: [id_rol], references: [id_rol])

  @@id([id_rol, id_permiso])
}

model permisos {
  id_permiso   Int            @id @default(autoincrement())
  nombre       String         @db.VarChar(25)
  rol_permisos rol_permisos[]
}

model historial_usuario {
  id_historial   Int       @id @default(autoincrement())
  id_usuario     Int
  id_metodo      Int
  accion         String?   @db.VarChar(35)
  descripcion    String?   @db.Text
  table_nom      String?   @db.VarChar(40)
  fecha_creacion DateTime?
  usuarios       usuarios  @relation(fields: [id_usuario], references: [id_usuario])
}

model historias {
  id_historia         Int                   @id @default(autoincrement())
  fecha               DateTime              @db.Date
  titulo              String                @db.VarChar(45)
  resumen             String                @db.VarChar(120)
  descripcion         String                @db.Text
  id_lugar            Int
  id_categoria        Int
  historia_personajes historia_personajes[]
  categorias          categorias            @relation(fields: [id_categoria], references: [id_categoria])
  lugares             lugares               @relation(fields: [id_lugar], references: [id_lugar])
}

model historia_personajes {
  id_personaje Int
  id_historia  Int
  historias    historias    @relation(fields: [id_historia], references: [id_historia])
  personajes_h personajes_h @relation(fields: [id_personaje], references: [id_personaje])

  @@id([id_personaje, id_historia])
}

model personajes_h {
  id_personaje        Int                   @id @default(autoincrement())
  nombres             String                @db.VarChar(25)
  apellidos           String                @db.VarChar(30)
  fecha_nacimiento    DateTime              @db.Date
  detalle             String                @db.Text
  historia_personajes historia_personajes[]
}

model lugares {
  id_lugar            Int                   @id @default(autoincrement())
  cod_departamento    String                @db.VarChar(5)
  nombre              String                @db.VarChar(80)
  latitud             Float?
  longitud            Float?
  etnias              etnias[]
  historias           historias[]
  departamentos       departamentos         @relation(fields: [cod_departamento], references: [cod_departamento])
  ubicaciones_eventos ubicaciones_eventos[]
}

model departamentos {
  cod_departamento String    @id @db.VarChar(5)
  departamento     String?   @db.VarChar(20)
  lat              Float?
  lng              Float?
  lugares          lugares[]
}

model codigos_ver {
  codigo String    @id @db.VarChar(6)
  fecha  DateTime? @default(dbgenerated("dateadd(minute,(5),getdate())"), map: "df_expiration_date") @db.DateTime
  correo String    @db.VarChar(30)
}

model eventos {
  id_evento              Int                      @id @default(autoincrement())
  fecha                  DateTime                 @db.Date
  inicio                 DateTime                 @db.Time
  fin                    DateTime?                @db.Time
  nombre                 String                   @db.VarChar(80)
  detalle                String                   @db.Text
  id_categoria           Int?
  activo                 Int?                     @default(1, map: "DF__eventos__activo__04E4BC85") @db.TinyInt
  archivo_eventos        archivo_eventos[]
  asistencia_eventos     asistencia_eventos[]
  categorias             categorias?              @relation(fields: [id_categoria], references: [id_categoria])
  eventos_patrocinadores eventos_patrocinadores[]
  recursos_eventos       recursos_eventos[]
  ubicaciones_eventos    ubicaciones_eventos[]
}

model recursos_eventos {
  id_recurso_evento Int      @id @default(autoincrement())
  id_evento         Int
  id_recurso        Int
  monto             Float
  cantidad          Int
  eventos           eventos  @relation(fields: [id_evento], references: [id_evento])
  recursos          recursos @relation(fields: [id_recurso], references: [id_recurso])
}

model recursos {
  id_recurso       Int                @id @default(autoincrement())
  nombre           String             @db.Text
  cantidad         Int
  cantidad_act     Int?               @default(0, map: "DF__recursos__cantid__100C566E")
  recursos_eventos recursos_eventos[]
}

model eventos_patrocinadores {
  id_evento_patrocinador Int            @id @default(autoincrement())
  id_evento              Int
  id_patrocinador        Int
  producto               String?        @db.VarChar(40)
  servicio               String?        @db.VarChar(40)
  cantidad               Int?
  observacion            String?        @db.Text
  id_medida              Int
  eventos                eventos        @relation(fields: [id_evento], references: [id_evento])
  medidas                medidas        @relation(fields: [id_medida], references: [id_medida])
  patrocinadores         patrocinadores @relation(fields: [id_patrocinador], references: [id_patrocinador])
}

model medidas {
  id_medida              Int                      @id @default(autoincrement())
  medida                 String                   @db.VarChar(20)
  eventos_patrocinadores eventos_patrocinadores[]
}

model patrocinadores {
  id_patrocinador        Int                      @id @default(autoincrement())
  patrocinador           String?                  @db.VarChar(50)
  eventos_patrocinadores eventos_patrocinadores[]
}

model archivo_eventos {
  id_archivo Int     @id @default(autoincrement())
  nombre     String  @db.VarChar(35)
  ext        String  @db.VarChar(4)
  id_evento  Int
  eventos    eventos @relation(fields: [id_evento], references: [id_evento])
}

model asistencia_eventos {
  id_usuario Int
  id_evento  Int
  activo     Int      @default(1)
  eventos    eventos  @relation(fields: [id_evento], references: [id_evento])
  usuarios   usuarios @relation(fields: [id_usuario], references: [id_usuario])

  @@id([id_usuario, id_evento])
}

model categorias {
  id_categoria      Int             @id @default(autoincrement())
  id_tipo_categoria Int
  nombre            String          @db.VarChar(45)
  activo            Int             @default(1)
  tipo_categorias   tipo_categorias @relation(fields: [id_tipo_categoria], references: [id_tipo_categoria])
  eventos           eventos[]
  historias         historias[]
}

model ubicaciones_eventos {
  id_ubicacion_eventos Int     @id @default(autoincrement())
  id_ubicacion         Int
  id_evento            Int
  eventos              eventos @relation(fields: [id_evento], references: [id_evento])
  lugares              lugares @relation(fields: [id_ubicacion], references: [id_lugar])
}

model tipo_categorias {
  id_tipo_categoria Int          @id @default(autoincrement())
  tipo_categoria    String?      @db.VarChar(40)
  categorias        categorias[]
}

model etnias {
  id_etnia   Int     @id @default(autoincrement())
  nombre     String? @db.VarChar(25)
  id_lugar   Int
  id_idioma  Int
  costumbres String  @db.Text
  idiomas    idiomas @relation(fields: [id_idioma], references: [id_idioma])
  lugares    lugares @relation(fields: [id_lugar], references: [id_lugar])
}

model idiomas {
  id_idioma Int      @id @default(autoincrement())
  idioma    String   @db.VarChar(20)
  etnias    etnias[]
}

model archivos_presidente {
  id_archivo    Int         @id(map: "PK__archivos__9B696443F46EE16E") @default(autoincrement())
  id_presidente Int
  nombre        String      @db.VarChar(35)
  es_portada    Int?        @default(0, map: "DF__archivos___es_po__0D7A0286") @db.TinyInt
  activo        Int?        @default(1, map: "DF__archivos___activ__160F4887") @db.TinyInt
  presidentes   presidentes @relation(fields: [id_presidente], references: [id_presidente], onUpdate: NoAction, map: "FK__archivos___id_pr__0E6E26BF")
}

model mandatos_presidente {
  id_mandato    Int         @id(map: "PK__mandatos__7711F8C3384E1A92") @default(autoincrement())
  id_presidente Int
  nro_mandato   Int
  fecha_ini     DateTime?   @db.Date
  fecha_fin     DateTime?   @db.Date
  observacion   String?     @db.Text
  presidentes   presidentes @relation(fields: [id_presidente], references: [id_presidente], onUpdate: NoAction, map: "FK__mandatos___id_pr__0A9D95DB")
}

model partido_politico {
  id_partido_politico Int           @id(map: "PK__partido___DFFDC432FDF34560") @default(autoincrement())
  nombre              String        @db.VarChar(100)
  abrv                String?       @db.VarChar(10)
  activo              Int?          @default(1, map: "DF__partido_p__activ__1332DBDC") @db.TinyInt
  presidentes         presidentes[]
}

model presidentes {
  id_presidente       Int                   @id(map: "PK__presiden__7845F53D23BFB56C") @default(autoincrement())
  biografia           String?               @db.Text
  nombre              String                @db.VarChar(50)
  apellido            String                @db.VarChar(30)
  fecha_nacimiento    DateTime              @db.Date
  fecha_muerte        DateTime?             @db.Date
  eventos_importantes String?               @db.Text
  id_partido_politico Int
  activo              Int?                  @default(1, map: "DF__president__activ__151B244E") @db.TinyInt
  archivos_presidente archivos_presidente[]
  mandatos_presidente mandatos_presidente[]
  partido_politico    partido_politico      @relation(fields: [id_partido_politico], references: [id_partido_politico], onUpdate: NoAction, map: "FK__president__id_pa__14270015")
}
